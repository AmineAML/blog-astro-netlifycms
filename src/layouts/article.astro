---
    import PostContent from '../components/PostContent.astro';
    import PostHeader from '../components/PostHeader.svelte';
    import PostQuote from '../components/PostQuote.svelte';
    import PostShare from '../components/PostShare.svelte';
    import PostAuthor from '../components/PostAuthor.svelte';
    import Footer from '../components/Footer.svelte';
    import GoogleAnalytics from '../components/GoogleAnalytics.astro';
    import Navbar from '../components/Navbar.svelte';
    import { blogUrl, apiUrl } from '../lib/variables.js';
    import '../assets/global.css';

    const { Content, frontmatter, rawContent, compiledContent } = Astro.props

    // console.log(data)
    console.log('llllllllllllll')
    console.log(Content)
    console.log(frontmatter)
    console.log(rawContent())

    // const { slug } = Astro.request.params;
    // const { slug } = Astro.params;

    // const response = await fetch(`${apiUrl}/articles/${slug}`);
    // const data = await response.json();

    function convertToSlug(text) {
        return text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '')
    }

    // export async function getStaticPaths({ rss }) {
    //     // const response = await fetch(`${apiUrl}/articles`);
    //     // const data = await response.json();

    //     const data = (await Astro.glob('../pages/posts/*.md')).filter(post => post.frontmatter.title != 'HIDE_DEFAULT_ARTICLE').map(post => post.frontmatter).sort((a, b) => (new Date(b.date) as any) - (new Date(a.date) as any))

    //     rss({
    //         // The RSS Feed title, description, and custom metadata.
    //         title: 'EchoSpaceDev Blog',
    //         description: 'A blog about programming, Software Development with tutorials and topics discussions mainly about the Back-End and the DevOps',
    //         customData: `<language>en-us</language>`,
    //         // The list of items for your RSS feed, sorted.
    //         items: [...data].map(article => ({
    //             title: article.frontmatter.title,
    //             description: article.frontmatter.description,
    //             link: `${blogUrl}/posts/${convertToSlug(article.frontmatter.title + '-' + article.frontmatter.description)}`,
    //             pubDate: article.content.date,
    //         })),
    //         // Optional: Customize where the file is written to.
    //         // Otherwise, defaults to "/rss.xml"
    //         // dest: "/my/custom/feed.xml",
    //     });

    //     // return data.map(article => {
    //     //     const slug = convertToSlug(article.frontmatter.title + '-' + article.frontmatter.description)
    //     //     return {
    //     //         params: {
    //     //             slug
    //     //         }
    //     //     }
    //     // })
    // }

    const url = `${blogUrl}/posts/${convertToSlug(frontmatter.title + '-' + frontmatter.description)}`;

    const title = `${frontmatter.title} | EchoSpaceDev Blog`;

    const author = (await Astro.glob('/src/lib/other/authors/*.md')).find(author => author.frontmatter.name == frontmatter.author).frontmatter

    // const markdownContent = data.rawContent()
    // console.log('rrrrrrrr', data.rawContent())
    
    // async function getAuthorByFullName(name) {
    //     return (await Astro.glob('/src/lib/other/authors/*.md')).find(author => author.frontmatter.name == name).frontmatter
    // }
---

<!doctype html>

<html lang="en" data-theme="retro" prefix="og: https://ogp.me/ns/article#">
<head>
    <GoogleAnalytics /> 
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <title>{title}</title>

    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    
    <!-- <link rel="stylesheet" href="/style/global.css" type="text/css"> -->
    <!-- <link rel="stylesheet" href="/style/home.css"> -->
    <!-- <link rel="stylesheet" href={Astro.resolve("../../assets/global.css")}> -->

    <!-- <meta name="description" content={data.description}> -->

    <!-- VS Code doesn't support json ld and shows errors but it does not effect the project -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": data.title,
      "image": [
        data.content.image,
       ],
      "datePublished": data.content.published_at,
      "dateModified": data.content.updated_at,
      "author": {
          "@type": "Person",
          "name": data.content.author.name,
          "url": data.content.author.website
        }
    }
    </script>

    <meta property="og:title" content={frontmatter.title}>
    <meta property="og:type" content="article">
    <meta property="og:url" content={url}>
    <meta property="og:image" content={blogUrl + frontmatter.image.replace('public', '')}>
    <meta property="og:image:alt" content={`Thumbnail for ${frontmatter.title} blog post`}>
    <meta property="og:description" content={frontmatter.description}>
    <meta property="og:site_name" content="EchoSpaceDev Blog">
    <meta property="article:published_time" content={frontmatter.published_at}>
    <meta property="article:modified_time" content={frontmatter.updated_at}>
    <meta property="article:author:first_name" content={frontmatter.author.split(' ')[0]}>
    <meta property="article:author:last_name" content={frontmatter.author.split(' ')[1]}>
    <!-- <meta property="article:section" content={data.topics.map(function(topic) { return topic.name }).join(', ')}>
    <meta property="article:tag" content={data.topics.map(function(topic) { return topic.name }).join(', ')}> -->
    <meta property="article:section" content={frontmatter.topic}>
    <meta property="article:tag" content={frontmatter.topic}>
    <!-- <meta property="og:locale" content="en_GB" />
    <meta property="og:locale:alternate" content="fr_FR" />
    <meta property="og:locale:alternate" content="es_ES" /> -->

    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@aml_amine" />
    <meta name="twitter:title" content={frontmatter.title} />
    <meta name="twitter:description" content={frontmatter.description} />
    <meta name="twitter:image" content={frontmatter.image} />
    <meta name="twitter:image:alt" content={`Thumbnail for ${frontmatter.title} blog post`}>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans&family=Raleway&display=swap" rel="stylesheet">

    <!-- Robots index -->
    <!-- <meta name="robots" content="index, nofollow" /> -->

</head>

<body>
    <Navbar />

    <main class="container mx-auto px-4 max-w-xl">
        <article itemscope itemtype="http://schema.org/Article" class="flex flex-col space-y-2 mt-10 mb-10">
            <!-- <div class="flex flex-col space-y-2 mt-10 mb-10"> -->
                <PostHeader title={frontmatter.title} image={frontmatter.image} imageSource={frontmatter.image_source} topics={[frontmatter.topics]} publishedAt={frontmatter.date} author={author} />
                <div class="divider" />
                <PostContent markdownData={compiledContent()} />
                <!-- Quotes are optional -->
                {frontmatter.quote != null ? <PostQuote quote={frontmatter.quote} quoteBy={frontmatter.quote_by} /> : ''}
                <div class="divider" />
                <PostShare url={url} />
                <PostAuthor author={author} />
            <!-- </div> -->
        </article>
    </main>

    <Footer />

</body>

</html>